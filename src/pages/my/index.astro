---
import { SITE } from "@/lib/config";
import Head from "@/components/bases/head.astro";
import Header from "@/components/shared/header.astro";
import Footer from "@/components/shared/footer.astro";
import BannerSection from "@/components/shared/banner-section.astro";
import { FEATURES } from "@/lib/config/features";

// 認証機能が無効の場合はトップページへリダイレクト
if (!FEATURES.AUTH) {
  return Astro.redirect('/');
}

// ページメタデータ
const meta = {
  title: "マイページ - " + SITE.title,
  description: "ブックマーク、フォロー中の著者、閲覧履歴を管理",
  image: SITE.image,
  type: "website",
  url: new URL("/my", SITE.url),
};
---

<!doctype html>
<html lang={SITE.locale} dir={SITE.dir}>
  <Head meta={meta} />
  <body class="flex flex-col">
    <Header />
    <main class="flex-1">
  <div class="container mx-auto py-8 px-4">
    <h1 class="text-3xl font-bold mb-6">マイページ</h1>
    
    <div class="tabs tabs-boxed mb-6">
      <a class="tab tab-active" data-tab="bookmarks">ブックマーク</a>
      <a class="tab" data-tab="follows">フォロー中の著者</a>
      <a class="tab" data-tab="history">閲覧履歴</a>
    </div>
    
    <!-- ブックマーク一覧 -->
    <div id="bookmarks-content" class="tab-content">
      <div id="bookmarks-loading" class="flex justify-center py-8">
        <span class="loading loading-spinner loading-lg"></span>
      </div>
      <div id="bookmarks-list" class="grid gap-4 hidden"></div>
      <div id="bookmarks-empty" class="text-center text-base-content/70 py-8 hidden">
        ブックマークした記事はありません
      </div>
    </div>
    
    <!-- フォロー中の著者一覧 -->
    <div id="follows-content" class="tab-content hidden">
      <div id="follows-loading" class="flex justify-center py-8">
        <span class="loading loading-spinner loading-lg"></span>
      </div>
      <div id="follows-list" class="grid gap-4 hidden"></div>
      <div id="follows-empty" class="text-center text-base-content/70 py-8 hidden">
        フォロー中の著者はいません
      </div>
    </div>
    
    <!-- 閲覧履歴 -->
    <div id="history-content" class="tab-content hidden">
      <div id="history-loading" class="flex justify-center py-8">
        <span class="loading loading-spinner loading-lg"></span>
      </div>
      <div id="history-list" class="grid gap-4 hidden"></div>
      <div id="history-empty" class="text-center text-base-content/70 py-8 hidden">
        閲覧履歴はありません
      </div>
    </div>
  </div>
    </main>
    <BannerSection />
    <Footer />
  </body>
</html>

<script>
  // セッション復元
  const restoreSession = async () => {
    try {
      const { supabase } = await import('@/lib/auth/supabase');
      const { data: { session } } = await supabase.auth.getSession();
      if (session) {
        console.log('Session restored on my page');
      }
    } catch (error) {
      console.error('Session restore error:', error);
    }
  };
  
  // 最初にセッションを復元
  restoreSession();
</script>

<script>
  
  const initializeMyPage = async () => {
    // 動的インポート
    const { getCurrentUser } = await import('@/lib/auth/utils');
    const { getBookmarks } = await import('@/lib/auth/bookmarks');
    const { getFollowedAuthors } = await import('@/lib/auth/follows');
    const { getReadingHistory } = await import('@/lib/auth/history');
    
    // ユーザー認証チェック
    const user = await getCurrentUser();
    if (!user) {
      window.location.href = '/';
      return;
    }
    
    // タブ切り替え機能
    const tabs = document.querySelectorAll('.tab');
    const contents = document.querySelectorAll('.tab-content');
    
    tabs.forEach((tab) => {
      tab.addEventListener('click', () => {
        const target = tab.getAttribute('data-tab');
        if (!target) return;
        
        tabs.forEach((t) => t.classList.remove('tab-active'));
        tab.classList.add('tab-active');
        
        contents.forEach((c) => c.classList.add('hidden'));
        document.getElementById(`${target}-content`)?.classList.remove('hidden');
        
        // データロード
        if (target === 'bookmarks') {
          loadBookmarks();
        } else if (target === 'follows') {
          loadFollows();
        } else if (target === 'history') {
          loadHistory();
        }
      });
    });
    
    // 初期データロード
    loadBookmarks();
  };
  
  const loadBookmarks = async () => {
    const loading = document.getElementById('bookmarks-loading');
    const list = document.getElementById('bookmarks-list');
    const empty = document.getElementById('bookmarks-empty');
    
    if (!loading || !list || !empty) return;
    
    loading.classList.remove('hidden');
    list.classList.add('hidden');
    empty.classList.add('hidden');
    
    try {
      const { getBookmarks } = await import('@/lib/auth/bookmarks');
      const bookmarks = await getBookmarks();
      
      // articlesは静的データとして取得が必要
      const articlesResponse = await fetch('/api/articles.json');
      const articles = await articlesResponse.json();
      
      if (bookmarks.length === 0) {
        empty.classList.remove('hidden');
      } else {
        const bookmarkedArticles = articles.filter(article => 
          bookmarks.some(b => b.article_id === article.id)
        );
        
        list.innerHTML = bookmarkedArticles.map(article => `
          <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
              <h2 class="card-title">
                <a href="/articles/${article.id}" class="hover:text-primary">
                  ${article.data.title}
                </a>
              </h2>
              <p class="text-sm text-base-content/70">${article.data.description}</p>
              <div class="card-actions justify-end">
                <a href="/articles/${article.id}" class="btn btn-primary btn-sm">読む</a>
              </div>
            </div>
          </div>
        `).join('');
        
        list.classList.remove('hidden');
      }
    } catch (error) {
      console.error('ブックマークロードエラー:', error);
      empty.textContent = 'ブックマークの読み込みに失敗しました';
      empty.classList.remove('hidden');
    } finally {
      loading.classList.add('hidden');
    }
  };
  
  const loadFollows = async () => {
    const loading = document.getElementById('follows-loading');
    const list = document.getElementById('follows-list');
    const empty = document.getElementById('follows-empty');
    
    if (!loading || !list || !empty) return;
    
    loading.classList.remove('hidden');
    list.classList.add('hidden');
    empty.classList.add('hidden');
    
    try {
      const { getFollowedAuthors } = await import('@/lib/auth/follows');
      const follows = await getFollowedAuthors();
      
      // authorsは静的データとして取得
      const authorsResponse = await fetch('/api/authors.json');
      const authors = await authorsResponse.json();
      
      if (follows.length === 0) {
        empty.classList.remove('hidden');
      } else {
        const followedAuthors = authors.filter(author => 
          follows.some(f => f.author_id === author.id)
        );
        
        list.innerHTML = followedAuthors.map(author => `
          <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
              <h2 class="card-title">
                <a href="/authors/${author.id}" class="hover:text-primary">
                  ${author.data.name}
                </a>
              </h2>
              ${author.data.bio ? `<p class="text-sm text-base-content/70">${author.data.bio}</p>` : ''}
              <div class="card-actions justify-end">
                <a href="/authors/${author.id}" class="btn btn-primary btn-sm">記事を見る</a>
              </div>
            </div>
          </div>
        `).join('');
        
        list.classList.remove('hidden');
      }
    } catch (error) {
      console.error('フォローロードエラー:', error);
      empty.textContent = 'フォロー情報の読み込みに失敗しました';
      empty.classList.remove('hidden');
    } finally {
      loading.classList.add('hidden');
    }
  };
  
  const loadHistory = async () => {
    const loading = document.getElementById('history-loading');
    const list = document.getElementById('history-list');
    const empty = document.getElementById('history-empty');
    
    if (!loading || !list || !empty) return;
    
    loading.classList.remove('hidden');
    list.classList.add('hidden');
    empty.classList.add('hidden');
    
    try {
      const { getReadingHistory } = await import('@/lib/auth/history');
      const history = await getReadingHistory();
      
      // articlesは静的データとして取得
      const articlesResponse = await fetch('/api/articles.json');
      const articles = await articlesResponse.json();
      
      if (history.length === 0) {
        empty.classList.remove('hidden');
      } else {
        const historyArticles = history
          .map(h => {
            const article = articles.find(a => a.id === h.article_id);
            return article ? { ...article, lastRead: h.last_read_at } : null;
          })
          .filter(Boolean);
        
        list.innerHTML = historyArticles.map((article: any) => `
          <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
              <h2 class="card-title">
                <a href="/articles/${article.id}" class="hover:text-primary">
                  ${article.data.title}
                </a>
              </h2>
              <p class="text-sm text-base-content/70">${article.data.description}</p>
              <p class="text-xs text-base-content/50">
                最終閲覧: ${new Date(article.lastRead).toLocaleDateString('ja-JP')}
              </p>
              <div class="card-actions justify-end">
                <a href="/articles/${article.id}" class="btn btn-primary btn-sm">続きを読む</a>
              </div>
            </div>
          </div>
        `).join('');
        
        list.classList.remove('hidden');
      }
    } catch (error) {
      console.error('履歴ロードエラー:', error);
      empty.textContent = '閲覧履歴の読み込みに失敗しました';
      empty.classList.remove('hidden');
    } finally {
      loading.classList.add('hidden');
    }
  };
  
  // 初期化
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeMyPage);
  } else {
    initializeMyPage();
  }
</script>