---
export interface Props {
  currentSort?: string;
  baseUrl: string;
}

const { currentSort = 'newest', baseUrl } = Astro.props;
---

<div class="flex items-center gap-2 mb-6">
  <span class="text-sm text-gray-600">並び替え:</span>
  <div class="relative inline-block">
    <select
      id="sort-selector"
      class="appearance-none bg-white border border-gray-300 rounded-lg px-4 py-2 pr-8 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 cursor-pointer"
      data-base-url={baseUrl}
    >
      <option value="newest" selected={currentSort === 'newest'}>
        新着順
      </option>
      <option value="popular" selected={currentSort === 'popular'}>
        人気順
      </option>
    </select>
    <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
      <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
      </svg>
    </div>
  </div>
</div>

<script>
  const selector = document.getElementById('sort-selector') as HTMLSelectElement;
  const baseUrl = selector?.dataset.baseUrl || '/articles';
  
  selector?.addEventListener('change', (e) => {
    const target = e.target as HTMLSelectElement;
    const sort = target.value;
    
    // URLパラメータを更新
    const url = new URL(window.location.href);
    if (sort === 'newest') {
      url.searchParams.delete('sort');
    } else {
      url.searchParams.set('sort', sort);
    }
    
    // ページをリロード
    window.location.href = url.toString();
  });
  
  // 初期値を設定
  const urlParams = new URLSearchParams(window.location.search);
  const currentSortParam = urlParams.get('sort') || 'newest';
  if (selector) {
    selector.value = currentSortParam;
  }
</script>